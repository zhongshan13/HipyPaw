(function () {
  "use strict";

  var FaqTemplate = () => {
    const cssClasses = window.themeCore.utils.cssClasses;
    const on = window.themeCore.utils.on;
    const throttle = window.themeCore.utils.throttle;
    const debounce = window.themeCore.utils.debounce;

    let sections = [];

    const selectors = {
      anchorWrapper: ".js-faq-anchor-wrapper",
      anchor: ".js-faq-anchor-link",
      anchorActive: ".js-faq-anchor-link.is-active",
      anchorsListContainer: ".js-side-navigation-container",
      anchorsList: ".js-side-navigation-list",
      section: '[data-section-type="faq-template"]',
      block: ".js-faq-block",
      blockFirst: ".js-faq-block:first-of-type",
      cssRoot: ":root",
      header: ".js-header",
      headerSticky: "[data-header-sticky]",
    };

    const attributes = {
      url: "href",
      dataHideOnScrollDown: "data-hide-on-scroll-down",
    };

    const breakpoints = {
      extraSmall: 767,
    };

    const cssVars = {
      anchorsListOffsetTop: "--sticky-sidebar-offset-top",
      headerHeight: "--header-height",
      headerOffset: "--header-offset-top",
    };

    const defaultHeaderHeight = "1px";
    const defaultOffset = "0px";
    const sidebarOffset = 25;
    const scrollPadding = 20;

    let anchorsListOffsetTopValue,
      headerEl,
      hasStickyHeader,
      hidesOnScroll,
      rootEl = null,
      headerHeightValue = defaultHeaderHeight,
      headerOffsetValue = defaultOffset;

    function setHeaderVars() {
      rootEl = document.querySelector(selectors.cssRoot);
      headerOffsetValue = rootEl.style.getPropertyValue(cssVars.headerOffset).trim();
      if (headerOffsetValue === defaultOffset) {
        headerHeightValue = rootEl.style.getPropertyValue(cssVars.headerHeight).trim();
      }
      if (!headerHeightValue) {
        headerHeightValue = defaultHeaderHeight;
      }
    }

    function handleAnchorClick(evt) {
      const anchorEl = evt.target.closest(selectors.anchor);
      const sectionEl = evt.target.closest(selectors.section);
      if (!anchorEl || !sectionEl) return;

      const targetId = anchorEl.getAttribute(attributes.url);
      if (!targetId) return;

      const targetBlockContent = sectionEl.querySelector(targetId);

      // üîπ Êñ∞Â¢ûÔºöÂÖ≥Èó≠Âêå section ÂÜÖÁöÑÂÖ∂‰ªñ block
      sectionEl.querySelectorAll(selectors.block).forEach((block) => {
        if (block !== targetBlockContent.closest(selectors.block)) {
          block.classList.remove("is-active"); // Êç¢Êàê‰Ω†ÁöÑÂ±ïÂºÄÁ±ªÂêç
        }
      });

      let padding = scrollPadding;
      if (targetBlockContent.closest(selectors.blockFirst)) {
        padding += 2 * scrollPadding;
      }
      if ((hasStickyHeader && !hidesOnScroll) || (hidesOnScroll && window.scrollY > getOffsetTop(targetBlockContent))) {
        padding += headerEl.getBoundingClientRect().height;
      }

      preventEvent(evt);

      smoothScrollTo(targetBlockContent, padding);

      sectionEl.querySelectorAll(selectors.anchorActive).forEach((el) => {
        el.classList.remove(cssClasses.active);
      });

      // üîπ Êñ∞Â¢ûÔºöÂ±ïÂºÄÂΩìÂâç block
      targetBlockContent.closest(selectors.block).classList.add("is-active");
    }

    function getOffsetTop(el) {
      return window.pageYOffset + el.getBoundingClientRect().top;
    }

    function preventEvent(e) {
      if (!e) return false;
      e.preventDefault();
      e.stopPropagation();
      e.stopImmediatePropagation();
    }

    function smoothScrollTo(el, padding = 0) {
      const top = getOffsetTop(el);
      const targetTop =
        document.body.scrollHeight - top < window.innerHeight
          ? document.body.scrollHeight - window.innerHeight - scrollPadding
          : top - padding;
      window.scrollTo({ top: targetTop, behavior: "smooth" });
    }

    return Object.freeze({
      init: function (sectionId) {
        anchorsListOffsetTopValue = parseInt(getComputedStyle(document.documentElement).getPropertyValue(cssVars.anchorsListOffsetTop));
        headerEl = document.querySelector(selectors.header);
        hasStickyHeader = !!(headerEl && headerEl.querySelector(selectors.headerSticky));
        hidesOnScroll = headerEl && headerEl.hasAttribute(attributes.dataHideOnScrollDown);

        sections = [...document.querySelectorAll(selectors.section)]
          .filter((section) => !sectionId || section.closest(`#shopify-section-${sectionId}`))
          .map((section) => {
            const blocks = section.querySelectorAll(selectors.block);
            const anchors = section.querySelectorAll(selectors.anchor);
            const navbar = section.querySelector(selectors.anchorsListContainer);
            const list = section.querySelector(selectors.anchorsList);
            return { el: section, blocks, anchors, navbar, list };
          });

        setHeaderVars();

        if (sections && sections.length) {
          sections.forEach((section) => {
            on("resize", window, setHeaderVars);
            on("click", section.el, handleAnchorClick);
            on(
              "scroll",
              throttle(() => {
                // ... ËøôÈáåÊòØÂéüÊù•ÁöÑÊªöÂä®ÁõëÂê¨ÈÄªËæë
                setHeaderVars();
              }, sidebarOffset)
            );
          });
        }
      },
    });
  };

  const initFaq = () => {
    window.themeCore.FaqTemplate = window.themeCore.FaqTemplate || FaqTemplate();
    window.themeCore.utils.register(window.themeCore.FaqTemplate, "faq-simple");
  };

  if (window.themeCore && window.themeCore.loaded) {
    initFaq();
  } else {
    document.addEventListener("theme:all:loaded", initFaq, { once: true });
  }
})();
